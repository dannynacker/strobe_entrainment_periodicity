%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%

%% ++++++++++++++++++++++++++++++++++++++ %%
%% Wednesday, July the Thirty-First, 2024 %%
%% ++++++++++++++++++++++++++++++++++++++ %%

%% ++++++++++++ %%
%% This script: %%
%% ++++++++++++ %%

%% ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ %%
% 1. Prompts the user to enter participant ID, age, sex, handedness, and IAF value    %%
% 2. Simulates and sends over 5 minutes (300 seconds) of strobe at specified          %%
% frequencies and conditions (periodic vs. aperiodic Poisson relative onset jitter)   %%
% for a total of 8 trials; These conditions are periodic and aperiodic at frequencies %% 
% 8, 10, 14, and IAF Hz                                                               %%
% 3. Randomizes the order of condition selection                                      %%
% 4. Forces aperiodic effective frequencies utilizing strobe sequences selected       %%
% from a predetermined sample signal previously generated via force_EF.m              %%
% 5. Sends these sequences over to the SCCS strobe light and prompts the              %%
% user to press any key to begin the next trial                                       %%
% 6. Requires a series of addition scripts and files.                                 %%
% 7. Requires the Signal Processing Toolbox (I think)                                 %%
% 8. Is a joint effort among Dr. David Schwartzman, Dr. Lionel Barnett, and           %%
% University of Sussex MSc student Danny Nacker (under the supervision of Dr. David   %%
% Schwartzman, Dr. Lionel Barnett, and Dr. Anil Seth, and is a modification of strobe %%
% device interfacing originally made by doctoral student Romy Beaut√©.                 %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ %%

%% ++++++++++++ %%
%% Files Needed %%
%% ++++++++++++ %%

%% +++++++++++++++ %%
%% For the Trigger %%
%% +++++++++++++++ %%

% config_io.m 
% inp.m
% inputoutx64.dll
% io64.m
% IOPort.m 
% outp.m

%% ++++++++++++++ %%
%% For the Strobe %%
%% ++++++++++++++ %%

% calculate_effective_frequency.m (I think)
% gen_strobe_aperiodic for simulating the aperiodic sequence
% gen_strobe_periodic for simulating the periodic sequence
% regularise_strobe.m
% sample_strobe.m
% SCCS_strobe_prepare_data.m
% StrobeDevice.m 
% DeviceUsageFromFileExample.m (I think)
% the StrobeDevice folder
% the 42 samples files generated by EF_bank.m 

%% ++++++++++ %%
%% Tone Files %%
%% ++++++++++ %%

% copper_bell_A.mp3 for the pre-stimulation readiness tone 

%% ++++++++++++++++++++++++++ %%
%% Initial Simulation Details %%
%% ++++++++++++++++++++++++++ %%

%% +++++++++++++++++ %%
%% Specify Our Paths %%
%% +++++++++++++++++ %%

addpath("F:\final_experiment");
audioFilePath = ("F:\final_experiment\copper_bell_A.mp3");
aperiodicSamplePath = ("F:\final_experiment\aperiodic");

%% +++++++++++++++++ %%
%% Initiate the Tone %%
%% +++++++++++++++++ %%

[y, Fs] = audioread(audioFilePath);
 
%% +++++++++++++++++++ %%
%% Participant Details %%
%% +++++++++++++++++++ %%

% Participant ID
ID = input('Please enter the participant ID: '); % numeric

% Participant Age
age = input('Please enter the participant age: '); % numeric

% Participant Sex
while true
    sex = input('Please enter the participant sex (M/F): ', 's');
    if ismember(sex, {'M', 'F'})
        break;
    else
        disp('Invalid input. Please enter M or F.');
    end
end

% Participant Handedness
while true
    handedness = input('Please enter the participant handedness (R/L): ', 's');
    if ismember(handedness, {'R', 'L'})
        break;
    else
        disp('Invalid input. Please enter R or L.');
    end
end

% Participant IAF
IAF = input('Please enter the IAF value: '); % Value from 8 to 12, 0.1-stepwise

%% +++++++++++++++++ %%
%% Strobe Parameters %%
%% +++++++++++++++++ %%

% Define parameters (Thanks, Lionel!) 
T = 300;  % total time (secs)
relo = true;  % relative onset time with Gamma jitter? (set to true for phase drift)
ondur = 'hcycle';  % cycle "on" duration
dsig = 'fixed';  % on-duration
rmode = 3;  % regularisation mode
fs = 2000;  % Hz - this is apparently what the device expects
dfac = 5; % spectral power display frequency cutoff factor 

%% +++++++++++ %%
%% Value Banks %%
%% +++++++++++ %%

F_values_Poisson = [11.2, 11.4, 11.4, 11.5, 11.6, 11.8, 12.1, 12, 12.2, 12.3, 12.5, 12.7, 12.8, 12.8, 13, 13.2, 13.4, 13.6, 13.6, 13.8, 13.8, 14.2, 14.3, 14.3, 14.5, 14.6, 14.7, 15, 15, 15.3, 15.5, 15.5, 15.6, 15.7, 15.9, 16, 16.1, 16.2, 16.4, 16.6, 16.7, 19.5];
EF_values_Poisson = [7.993333333, 8.106666667, 8.193333333, 8.306666667, 8.406666667, 8.506666667, 8.6, 8.703333333, 8.81, 8.906666667, 8.996666667, 9.093333333, 9.203333333, 9.3, 9.403333333, 9.49, 9.606666667, 9.693333333, 9.803333333, 9.906666667, 10.00666667, 10.09333333, 10.2, 10.3, 10.40333333, 10.5, 10.59333333, 10.69333333, 10.8, 10.9, 11.01, 11.09, 11.19, 11.3, 11.40333333, 11.49666667, 11.61, 11.69, 11.79333333, 11.90666667, 11.99, 14.00666667];

F_values_periodic = [8, 10, 14, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 14];
EF_values_periodic = [8, 10, 14, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12, 14];

%% +++++++++++++++++++++ %%
%% Selecting A Condition %%
%% +++++++++++++++++++++ %%
% Loop through randomized conditions
for i = 1:length(randomized_conditions)
    success = false; % Initialize success flag
    while ~success
        try
            condition = randomized_conditions{i};
            
            % Assign osig value based on the condition type
            if contains(condition, 'Aperiodic')
                osig = 'Poisson';
            else
                osig = 'periodic';
            end

            % Initialize F and EF
            F = NaN;
            EF = NaN;

            % Select appropriate F and EF values based on condition
            switch condition
                case '8 Hz Aperiodic'
                    F = F_values_Poisson(1);
                    EF = EF_values_Poisson(1);
                case '10 Hz Aperiodic'
                    F = F_values_Poisson(20);
                    EF = EF_values_Poisson(20);
                case '14 Hz Aperiodic'
                    F = F_values_Poisson(end);
                    EF = EF_values_Poisson(end);
                case '8 Hz Periodic'
                    F = F_values_periodic(1);
                    EF = EF_values_periodic(1);
                case '10 Hz Periodic'
                    F = F_values_periodic(2);
                    EF = EF_values_periodic(2);
                case '14 Hz Periodic'
                    F = F_values_periodic(3);
                    EF = EF_values_periodic(3);
                case 'IAF Hz Aperiodic'
                    index = find(abs(EF_values_Poisson - IAF) < tolerance, 1);
                    if ~isempty(index)
                        F = F_values_Poisson(index);
                        EF = EF_values_Poisson(index);
                    else
                        error('IAF value not found in EF_values_Poisson');
                    end
                case 'IAF Hz Periodic'
                    index = find(abs(EF_values_periodic - IAF) < tolerance, 1);
                    if ~isempty(index)
                        F = F_values_periodic(index);
                        EF = EF_values_periodic(index);
                    else
                        error('IAF value not found in EF_values_periodic');
                    end
            end
            
            if isnan(F) || isnan(EF)
                error('F or EF not set for condition: %s with osig: %s', condition, osig);
            end
            
            % Display selected parameters for current condition
            fprintf('Condition: %s\n', condition);
            fprintf('osig: %s\n', osig);
            fprintf('F: %f\n', F);
            fprintf('EF: %f\n', EF);
            fprintf('IAF: %f\n', IAF);
            
            % Store trial information
            trial_info{i+1, 1} = i; % Trial number
            trial_info{i+1, 2} = condition; % Condition
            trial_info{i+1, 3} = osig; % osig
            trial_info{i+1, 4} = F; % F
            trial_info{i+1, 5} = EF; % EF
            trial_info{i+1, 6} = ID; % Participant ID
            trial_info{i+1, 7} = age; % Age
            trial_info{i+1, 8} = sex; % Sex
            trial_info{i+1, 9} = handedness; % Handedness
            trial_info{i+1, 10} = IAF; % IAF

            % Initialize the device for each trial
            device = StrobeDevice(comPort);

            pause(1);

            if ~device.isConnected()
                disp("Device not connected.");
                device.closePort();
                clear('device');
                error('Failed to connect to the device.');
            end
            disp("Device connected.");

            % Run the strobe sequence
            success = runStrobeSequence(condition, F, EF, osig, T, fs, ondur, dfac, relo, dsig, rmode, device, aperiodicSamplePath, IAF);
            
            if ~success
                disp('Error occurred. Please press any key to repeat the trial.');
                pause;
            else
                % Successfully completed trial, prompt for next trial
                disp('Trial completed successfully. Press any key to proceed to the next trial.');
                pause;
            end

            % Close the device connection
            device.closePort();
            clear('device');
        catch ME
            % Ensure the error message is displayed correctly
            disp(['Error in trial ' num2str(i) ': ' ME.message]);
            disp('Please press any key to repeat the trial.');
            pause;
        end
    end
end

%% ++++++++++++++++++++++ %%
%% Save Trial Information %%
%% ++++++++++++++++++++++ %%

% Convert the cell array to a table
trial_table = cell2table(trial_info(2:end, :), 'VariableNames', trial_info(1, :));

% Save the table as an Excel file
filename = sprintf('Participant_%d_Trial_Info.xlsx', ID);

if isfile(filename)
    % Load existing data
    existing_data = readtable(filename);
    % Append new data
    trial_table = [existing_data; trial_table];
end

writetable(trial_table, filename);

%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%

%% +++++++++++++++++ %%
%% Support Functions %%
%% +++++++++++++++++ %%

%% +++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% Integer Conversion Function Required By The Light %%
%% +++++++++++++++++++++++++++++++++++++++++++++++++ %%

function value = binary8ToUint8(bitArray)
    % Each row of bitArray must be a single 8-bit value
    value = sum(bitArray .* [2^7, 2^6, 2^5, 2^4, 2^3, 2^2, 2^1, 2^0], 2);
    return;
end

%% ++++++++++++++++++++++++++++++++++++++++++++ %%
%% Strobe Sequence Function with Error Handling %%
%% ++++++++++++++++++++++++++++++++++++++++++++ %%

function success = runStrobeSequence(condition, F, EF, osig, T, fs, ondur, dfac, relo, dsig, rmode, device, aperiodicSamplePath, IAF)
    try
        % Create the appropriate strobe signal
        if contains(condition, 'Aperiodic')
            % Load the pre-generated sample file
            if contains(condition, 'IAF')
                fileName = sprintf('aperiodic_%.1f.mat', IAF);
            else
                fileName = sprintf('aperiodic_%.1f.mat', EF);
            end
            
            sampleFilePath = fullfile(aperiodicSamplePath, fileName);
            
            % Load the sample file
            loadedData = load(sampleFilePath);
            samples = loadedData.samples;
        else
            % Generate periodic signal
            signal = gen_strobe_periodic(F, T, ondur);
            [samples, ts] = sample_strobe(signal, fs, T);
        end

        % Calculate power spectrum
        [spower, f] = pspectrum(samples, fs, 'FrequencyLimits', [0, dfac*F]);

        % Prepare strobe data
        preparedStrobeData1D = SCCS_strobe_prepare_data(samples);
        save('strobe_sequence.mat', 'preparedStrobeData1D');

        % File name for the strobe sequence to be written to the device
        filename = "sequence.txt";

        pause(1);

        % Device connection and verification
        if ~device.isConnected()
            disp("Device not connected.");
            device.closePort();
            clear('device');
            success = false;
            return;
        end
        disp("Device connected.");

        [device, valid] = device.tryGetDeviceInfo(2);
        if ~valid
            disp("Failed to verify device.");
            device.closePort();
            clear('device');
            success = false;
            return;
        end
        disp("Device verified.");

        pause(1);

        % Check if file already exists on the device and delete if necessary
        fileList = device.getFileList();
        if any(contains(fileList, filename))
            disp("File already exists. Deleting first.");
            disp(device.deleteFile(filename));
        end

        pause(1);

        % Write strobe samples to the device file
        disp("Writing strobe samples to file...");
        response = device.writeToFile(filename, preparedStrobeData1D);
        if ~strcmp(response, "Done")
            disp("File write failed, aborting.");
            disp(response);
            device.closePort();
            clear('device');
            success = false;
            return;
        end
        disp("Done.");
        pause(1);

        % Play readiness tone
        sound(y, Fs);

        % Send start trigger
        startTriggerValue = getStartTriggerValue(condition);
        sendTrigger(startTriggerValue);

        % Play strobe file
        disp("Playing strobe file...");
        disp(device.playStrobeFile(filename, (length(preparedStrobeData1D)/12000) + 5));
        pause(1);

        % Send end trigger
        sendTrigger(127);

        % Get device temperatures
        disp("Getting device temps:");
        disp(device.getTemperatures());
        
        pause(5);

        % Close the device connection
        device.closePort();
        success = true;
    catch ME
        disp(['Error: ' ME.message]);
        success = false;
    end
end

%% ++++++++++++++++++++++++ %%
%% Trigger Sending Function %%
%% ++++++++++++++++++++++++ %%

function sendTrigger(triggerValue)
    ioObj = io64;
    status = io64(ioObj);
    address = hex2dec('CFF8'); % Standard LPT1 output port address
    io64(ioObj, address, triggerValue); % Send trigger 
    pause(0.05); % Small pause to ensure the trigger is registered
    io64(ioObj, address, 0); % Reset the port to 0
    pause(0.05); % Small pause to ensure the reset is registered
end

%% +++++++++++++++++++++++++++++++++++++++++++++ %%
%% Get Start Trigger Value Based on Condition %%
%% +++++++++++++++++++++++++++++++++++++++++++++ %%

function triggerValue = getStartTriggerValue(condition)
    switch condition
        case '8 Hz Periodic'
            triggerValue = 1;
        case '10 Hz Periodic'
            triggerValue = 2;
        case '14 Hz Periodic'
            triggerValue = 3;
        case 'IAF Hz Periodic'
            triggerValue = 4;
        case '8 Hz Aperiodic'
            triggerValue = 5;
        case '10 Hz Aperiodic'
            triggerValue = 6;
        case '14 Hz Aperiodic'
            triggerValue = 7;
        case 'IAF Hz Aperiodic'
            triggerValue = 8;
        otherwise
            error('Unknown condition: %s', condition);
    end
end

%% +++ %%
%% Fin %%
%% +++ %%

%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
%% ++++++++++++++++++++++++++++++++++++++++++++++++ %%
